using Gradio.Net.Enums;
using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using static System.Formats.Asn1.AsnWriter;

namespace Gradio.Net;

public static partial class gr
{ 
    public static async Task Click<T>(this T block,
       Func<Input,Task<Output>> fn,
       IEnumerable<Component> inputs = null,
       IEnumerable<Component> outputs = null,
       string apiName = null,
       bool scrollToOutput = false,
       ShowProgress showProgress = ShowProgress.Full,
       bool? queue = null,
       bool batch = false,
       int maxBatchSize = 4,
       bool preprocess = true,
       bool postprocess = true,
       Dictionary<string, object> cancels = null,
       decimal? every = null,
       TriggerMode? triggerMode = null,
       string js = null,
       ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
       string concurrencyId = null,
       bool showApi = true) where T: Block,IHaveClickEvent
    {
        await Events.Click.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Click<T>(this T block,
       Func<Input, IAsyncEnumerable<Output>> streamingFn,
       IEnumerable<Component> inputs = null,
       IEnumerable<Component> outputs = null,
       string apiName = null,
       bool scrollToOutput = false,
       ShowProgress showProgress = ShowProgress.Full,
       bool? queue = null,
       bool batch = false,
       int maxBatchSize = 4,
       bool preprocess = true,
       bool postprocess = true,
       Dictionary<string, object> cancels = null,
       decimal? every = null,
       TriggerMode? triggerMode = null,
       string js = null,
       ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
       string concurrencyId = null,
       bool showApi = true) where T : Block, IHaveClickEvent
    {
        await Events.Click.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }


    public static async Task Input<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveInputEvent
    {
        await Events.Input.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Input<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveInputEvent
    {
        await Events.Input.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Release<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveReleaseEvent
    {
        await Events.Release.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Release<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveReleaseEvent
    {
        await Events.Release.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Blur<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveBlurEvent
    {
        await Events.Blur.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Blur<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveBlurEvent
    {
        await Events.Blur.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Focus<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveFocusEvent
    {
        await Events.Focus.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Focus<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveFocusEvent
    {
        await Events.Focus.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Submit<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveSubmitEvent
    {
        await Events.Submit.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Submit<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveSubmitEvent
    {
        await Events.Submit.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Select<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveSelectEvent
    {
        await Events.Select.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Select<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveSelectEvent
    {
        await Events.Select.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Change<T>(this T block,
      Func<Input, Task<Output>> fn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveChangeEvent
    {
        await Events.Change.EventTrigger(block,
            fn: fn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }

    public static async Task Change<T>(this T block,
      Func<Input, IAsyncEnumerable<Output>> streamingFn,
      IEnumerable<Component> inputs = null,
      IEnumerable<Component> outputs = null,
      string apiName = null,
      bool scrollToOutput = false,
      ShowProgress showProgress = ShowProgress.Full,
      bool? queue = null,
      bool batch = false,
      int maxBatchSize = 4,
      bool preprocess = true,
      bool postprocess = true,
      Dictionary<string, object> cancels = null,
      decimal? every = null,
      TriggerMode? triggerMode = null,
      string js = null,
      ConcurrencyLimit concurrencyLimit = ConcurrencyLimit.Default,
      string concurrencyId = null,
      bool showApi = true) where T : Block, IHaveChangeEvent
    {
        await Events.Change.EventTrigger(block,
            streamingFn: streamingFn,
            inputs: inputs,
            outputs: outputs,
            apiName: apiName,
            scrollToOutput: scrollToOutput,
            showProgress: showProgress,
            queue: queue,
            batch: batch,
            maxBatchSize: maxBatchSize,
            preprocess: preprocess,
            postprocess: postprocess,
            cancels: cancels,
            every: every,
            triggerMode: triggerMode,
            js: js,
            concurrencyLimit: concurrencyLimit,
            concurrencyId: concurrencyId,
            showApi: showApi
            );
    }
}
